# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:11:49+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Header, UploadFile

from models import (
    BusinessCardRecognitionResult,
    FormDefinitionTemplate,
    FormRecognitionResult,
    GetPageAngleResult,
    ImageToLinesWithLocationResult,
    ImageToTextResponse,
    ImageToWordsWithLocationResult,
    OcrReceiptsPhotoToCsvPostResponse,
    PdfToLinesWithLocationResult,
    PdfToTextResponse,
    PdfToWordsWithLocationResult,
    PhotoToWordsWithLocationResult,
    ReceiptRecognitionResult,
)

app = MCPProxy(
    description='The powerful Optical Character Recognition (OCR) APIs let you convert scanned images of pages into recognized text.',
    title='ocrapi',
    version='v1',
    servers=[{'url': 'https://api.cloudmersive.com'}],
)


@app.post(
    '/ocr/image/to/lines-with-location',
    description=""" Converts an uploaded image in common formats such as JPEG, PNG into lines/text with location information and other metdata via Optical Character Recognition.  This API is intended to be run on scanned documents.  If you want to OCR photos (e.g. taken with a smart phone camera), be sure to use the photo/toText API instead, as it is designed to unskew the image first.  Note: for free tier API keys, it is required to add a credit card to your account for security reasons, to use the free tier key with this API. """,
    tags=['image_ocr_operations', 'image_preprocessing'],
    security=[
        APIKeyHeader(name="Apikey"),
    ],
)
def image_ocr__image_lines_with_location(
    language: Optional[str] = None,
    preprocessing: Optional[str] = None,
    file: UploadFile = ...,
):
    """
    Convert a scanned image into words with location
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/ocr/image/to/words-with-location',
    description=""" Converts an uploaded image in common formats such as JPEG, PNG into words/text with location information and other metdata via Optical Character Recognition.  This API is intended to be run on scanned documents.  If you want to OCR photos (e.g. taken with a smart phone camera), be sure to use the photo/toText API instead, as it is designed to unskew the image first.  Note: for free tier API keys, it is required to add a credit card to your account for security reasons, to use the free tier key with this API. """,
    tags=['image_ocr_operations', 'image_preprocessing'],
    security=[
        APIKeyHeader(name="Apikey"),
    ],
)
def image_ocr__image_words_with_location(
    language: Optional[str] = None,
    preprocessing: Optional[str] = None,
    file: UploadFile = ...,
):
    """
    Convert a scanned image into words with location
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/ocr/image/toText',
    description=""" Converts an uploaded image in common formats such as JPEG, PNG into text via Optical Character Recognition.  This API is intended to be run on scanned documents.  If you want to OCR photos (e.g. taken with a smart phone camera), be sure to use the photo/toText API instead, as it is designed to unskew the image first.  Note: for free tier API keys, it is required to add a credit card to your account for security reasons, to use the free tier key with this API. """,
    tags=['image_ocr_operations', 'image_preprocessing'],
    security=[
        APIKeyHeader(name="Apikey"),
    ],
)
def image_ocr__post(
    recognition_mode: Optional[str] = Header(None, alias='recognitionMode'),
    language: Optional[str] = None,
    preprocessing: Optional[str] = None,
    file: UploadFile = ...,
):
    """
    Convert a scanned image into text
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/ocr/pdf/to/lines-with-location',
    description=""" Converts a PDF into lines/text with location information and other metdata via Optical Character Recognition.  This API is intended to be run on scanned documents.  If you want to OCR photos (e.g. taken with a smart phone camera), be sure to use the photo/toText API instead, as it is designed to unskew the image first. """,
    tags=['pdf_ocr_operations'],
    security=[
        APIKeyHeader(name="Apikey"),
    ],
)
def pdf_ocr__pdf_to_lines_with_location(
    language: Optional[str] = None,
    preprocessing: Optional[str] = None,
    file: UploadFile = ...,
):
    """
    Convert a PDF into text lines with location
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/ocr/pdf/to/words-with-location',
    description=""" Converts a PDF into words/text with location information and other metdata via Optical Character Recognition.  This API is intended to be run on scanned documents.  If you want to OCR photos (e.g. taken with a smart phone camera), be sure to use the photo/toText API instead, as it is designed to unskew the image first. """,
    tags=['pdf_ocr_operations'],
    security=[
        APIKeyHeader(name="Apikey"),
    ],
)
def pdf_ocr__pdf_to_words_with_location(
    language: Optional[str] = None,
    preprocessing: Optional[str] = None,
    file: UploadFile = ...,
):
    """
    Convert a PDF into words with location
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/ocr/pdf/toText',
    tags=['pdf_ocr_operations'],
    security=[
        APIKeyHeader(name="Apikey"),
    ],
)
def pdf_ocr__post(
    recognition_mode: Optional[str] = Header(None, alias='recognitionMode'),
    language: Optional[str] = None,
    preprocessing: Optional[str] = None,
    file: UploadFile = ...,
):
    """
    Converts an uploaded PDF file into text via Optical Character Recognition.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/ocr/photo/recognize/business-card',
    description=""" Analyzes a photograph of a business card as input, and outputs key business information such as the name of the person, name of the business, the address of the business, the phone number, the email address and more.  Note: for free tier API keys, it is required to add a credit card to your account for security reasons, to use the free tier key with this API. """,
    tags=['image_ocr_operations', 'form_recognition'],
    security=[
        APIKeyHeader(name="Apikey"),
    ],
)
def image_ocr__photo_recognize_business_card(file: UploadFile):
    """
    Recognize a photo of a business card, extract key business information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/ocr/photo/recognize/form',
    description=""" Analyzes a photograph of a form as input, and outputs key business fields and information.  Customzie data to be extracted by defining fields for the form.  Note: for free tier API keys, it is required to add a credit card to your account for security reasons, to use the free tier key with this API. """,
    tags=['form_recognition', 'image_ocr_operations'],
    security=[
        APIKeyHeader(name="Apikey"),
    ],
)
def image_ocr__photo_recognize_form(
    form_template_definition: Optional[FormDefinitionTemplate] = Header(
        None, alias='formTemplateDefinition'
    ),
    recognition_mode: Optional[str] = Header(None, alias='recognitionMode'),
    preprocessing: Optional[str] = None,
    diagnostics: Optional[str] = None,
    language: Optional[str] = None,
    file: UploadFile = ...,
):
    """
    Recognize a photo of a form, extract key fields and business information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/ocr/photo/recognize/form/advanced',
    description=""" Analyzes a photograph of a form as input, and outputs key business fields and information.  Customzie data to be extracted by defining fields for the form.  Uses template definitions stored in Cloudmersive Configuration; to configure stored templates in a configuration bucket, log into Cloudmersive Management Portal and navigate to Settings &gt; API Configuration &gt; Create Bucket.  Note: for free tier API keys, it is required to add a credit card to your account for security reasons, to use the free tier key with this API. """,
    tags=['image_ocr_operations', 'form_recognition', 'image_preprocessing'],
    security=[
        APIKeyHeader(name="Apikey"),
    ],
)
def image_ocr__photo_recognize_form_advanced(
    bucket_i_d: Optional[str] = Header(None, alias='bucketID'),
    bucket_secret_key: Optional[str] = Header(None, alias='bucketSecretKey'),
    recognition_mode: Optional[str] = Header(None, alias='recognitionMode'),
    preprocessing: Optional[str] = None,
    diagnostics: Optional[str] = None,
    file: UploadFile = ...,
):
    """
    Recognize a photo of a form, extract key fields using stored templates
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/ocr/photo/recognize/receipt',
    description=""" Analyzes a photograph of a receipt as input, and outputs key business information such as the name of the business, the address of the business, the phone number of the business, the total of the receipt, the date of the receipt, and more.  Note: for free tier API keys, it is required to add a credit card to your account for security reasons, to use the free tier key with this API. """,
    tags=['image_ocr_operations', 'form_recognition', 'receipt_processing'],
    security=[
        APIKeyHeader(name="Apikey"),
    ],
)
def image_ocr__photo_recognize_receipt(
    recognition_mode: Optional[str] = Header(None, alias='recognitionMode'),
    language: Optional[str] = None,
    preprocessing: Optional[str] = None,
    file: UploadFile = ...,
):
    """
    Recognize a photo of a receipt, extract key business information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/ocr/photo/to/words-with-location',
    description=""" Converts a photo of a document or receipt in common formats such as JPEG, PNG into words/text with location information and other metdata via Optical Character Recognition.  This API is intended to be run on photographs of documents.  If you want to OCR scanned documents (e.g. taken with a scanner), be sure to use the image/toText API instead, as it is designed for that use case.  Note: for free tier API keys, it is required to add a credit card to your account for security reasons, to use the free tier key with this API. """,
    tags=['image_ocr_operations', 'receipt_processing', 'form_recognition'],
    security=[
        APIKeyHeader(name="Apikey"),
    ],
)
def image_ocr__photo_words_with_location(
    recognition_mode: Optional[str] = Header(None, alias='recognitionMode'),
    language: Optional[str] = None,
    preprocessing: Optional[str] = None,
    diagnostics: Optional[str] = None,
    file: UploadFile = ...,
):
    """
    Convert a photo of a document or receipt into words with location
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/ocr/photo/toText',
    description=""" Converts an uploaded photo of a document in common formats such as JPEG, PNG into text via Optical Character Recognition.  This API is intended to be run on photos of documents, e.g. taken with a smartphone and supports cases where other content, such as a desk, are in the frame and the camera is crooked.  If you want to OCR a scanned image, use the image/toText API call instead as it is designed for scanned images.  Note: for free tier API keys, it is required to add a credit card to your account for security reasons, to use the free tier key with this API. """,
    tags=['image_ocr_operations'],
    security=[
        APIKeyHeader(name="Apikey"),
    ],
)
def image_ocr__photo_to_text(
    recognition_mode: Optional[str] = Header(None, alias='recognitionMode'),
    language: Optional[str] = None,
    file: UploadFile = ...,
):
    """
    Convert a photo of a document into text
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/ocr/preprocessing/image/binarize',
    description=""" Perform an adaptive binarization algorithm on the input image to prepare it for further OCR operations. """,
    tags=['image_preprocessing'],
    security=[
        APIKeyHeader(name="Apikey"),
    ],
)
def preprocessing__binarize(file: UploadFile):
    """
    Convert an image of text into a binarized (light and dark) view
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/ocr/preprocessing/image/binarize/advanced',
    description=""" Perform an advanced adaptive, Deep Learning-based binarization algorithm on the input image to prepare it for further OCR operations.  Provides enhanced accuracy than adaptive binarization.  Image will be upsampled to 300 DPI if it has a DPI below 300. """,
    tags=['image_preprocessing', 'image_ocr_operations'],
    security=[
        APIKeyHeader(name="Apikey"),
    ],
)
def preprocessing__binarize_advanced(file: UploadFile):
    """
    Convert an image of text into a binary (light and dark) view with ML
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/ocr/preprocessing/image/get-page-angle',
    description=""" Analyzes a photo or image of a document and identifies the rotation angle of the page. """,
    tags=['image_preprocessing', 'receipt_processing'],
    security=[
        APIKeyHeader(name="Apikey"),
    ],
)
def preprocessing__get_page_angle(file: UploadFile):
    """
    Get the angle of the page / document / receipt
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/ocr/preprocessing/image/unrotate',
    description=""" Detect and unrotate an image of a document (e.g. that was scanned at an angle).  Great for document scanning applications; once unskewed, this image is perfect for converting to PDF using the Convert API or optical character recognition using the OCR API. """,
    tags=['image_preprocessing'],
    security=[
        APIKeyHeader(name="Apikey"),
    ],
)
def preprocessing__unrotate(file: UploadFile):
    """
    Detect and unrotate a document image
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/ocr/preprocessing/image/unrotate/advanced',
    description=""" Detect and unrotate an image of a document (e.g. that was scanned at an angle) using deep learning.  Great for document scanning applications; once unskewed, this image is perfect for converting to PDF using the Convert API or optical character recognition using the OCR API. """,
    tags=['image_preprocessing', 'image_ocr_operations'],
    security=[
        APIKeyHeader(name="Apikey"),
    ],
)
def preprocessing__unrotate_advanced(file: UploadFile):
    """
    Detect and unrotate a document image (advanced)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/ocr/preprocessing/image/unskew',
    description=""" Detect and unskew a photo of a document (e.g. taken on a cell phone) into a perfectly square image.  Great for document scanning applications; once unskewed, this image is perfect for converting to PDF using the Convert API or optical character recognition using the OCR API. """,
    tags=['image_preprocessing'],
    security=[
        APIKeyHeader(name="Apikey"),
    ],
)
def preprocessing__unskew(file: UploadFile):
    """
    Detect and unskew a photo of a document
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/ocr/receipts/photo/to/csv',
    description=""" Leverage Deep Learning to automatically turn a photo of a receipt into a CSV file containing the structured information from the receipt. """,
    tags=['image_ocr_operations', 'receipt_processing'],
    security=[
        APIKeyHeader(name="Apikey"),
    ],
)
def receipts__photo_to_c_s_v(file: UploadFile):
    """
    Convert a photo of a receipt into a CSV file containing structured information from the receipt
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
