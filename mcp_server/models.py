# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:11:49+00:00

from __future__ import annotations

from datetime import datetime
from typing import List, Optional

from pydantic import BaseModel, Field


class BusinessCardRecognitionResult(BaseModel):
    AddressString: Optional[str] = Field(
        None,
        description='The address printed on the business card (if included on the business card)',
    )
    BusinessName: Optional[str] = Field(
        None,
        description='The name of the business printed on the business card (if included on the business card)',
    )
    EmailAddress: Optional[str] = Field(
        None,
        description='The email address printed on the business card (if included on the business card)',
    )
    PersonName: Optional[str] = Field(
        None,
        description='The name of the person printed on the business card (if included on the business card)',
    )
    PersonTitle: Optional[str] = Field(
        None,
        description='The title of the person printed on the business card (if included on the business card)',
    )
    PhoneNumber: Optional[str] = Field(
        None,
        description='The phone number printed on the business card (if included on the business card)',
    )
    Successful: Optional[bool] = Field(
        None, description='True if the operation was successful, false otherwise'
    )
    Timestamp: Optional[datetime] = Field(
        None,
        description='The date and time printed on the business card (if included on the business card)',
    )


class FormFieldDefinition(BaseModel):
    AllowNumericDigits: Optional[bool] = Field(
        None,
        description='Optional - set to false to block values that contain numeric digits, set to true to allow numeric digits',
    )
    AlternateAnchor: Optional[str] = Field(
        None, description='Optional - alterate match text for the specified anchor'
    )
    AnchorMode: Optional[str] = Field(
        None,
        description='Optional - the matching mode for the anchor.  Possible values are Complete (requires the entire anchor to match) and Partial (allows only part of the anchor to match) and Horizontal (anchor must be laid out horizontally).  Default is Partial.',
    )
    BottomAnchor: Optional[str] = Field(
        None, description='Optional - the bottom anchor of the field'
    )
    DataType: Optional[str] = Field(
        None,
        description='The data type of the field; possible values are INTEGER (Integer value), STRING (Arbitrary string value, spaces are permitted), DATE (Date in a structured format), DECIMAL (Decimal number), ALPHANUMERIC (Continuous alphanumeric string with no spaces), STRINGNOWHITESPACE (A string that contains no whitespace characters), SERIALNUMBER (A serial-number style string that contains letters and numbers, and certain symbols; must contain at least one number), ALPHAONLY (Alphabet characters only, no numbers or symbols or whitespace)',
    )
    FieldID: Optional[str] = Field(
        None,
        description='The identifier of the field; use this to identify which field is being referenced.  Set to SkipField if you do not wish to return the value of this field in the result.',
    )
    HorizontalAlignmentType: Optional[str] = Field(
        None,
        description='Horizontal alignment of target value area relative to the field anchor; Possible values are Left, Right',
    )
    Ignore: Optional[List[str]] = Field(
        None,
        description='Optional - Ignore any result items that contain a partial or complete match with these text strings',
    )
    LeftAnchor: Optional[str] = Field(
        None, description='Optional - the left-hand anchor of the field'
    )
    MinimumCharacterCount: Optional[int] = Field(
        None,
        description='Optional - the target number of digits in the field; useful for fixed-length fields',
    )
    Options: Optional[str] = Field(
        None,
        description='Optional - additional options that can be set for this field definition, separated by commas.  Possible values are AllowMultiMatch (allow the same anchor to be matched to multiple fields)',
    )
    TargetDigitCount: Optional[int] = Field(
        None,
        description='Optional - the target number of digits in the field; useful for fixed-length fields',
    )
    TargetFieldHeight_Relative: Optional[float] = Field(
        None,
        description='Optional - scale factor for target field height - relative to height of field title',
    )
    TargetFieldHorizontalAdjustment: Optional[float] = Field(
        None,
        description='Optional - horizontal adjestment in relative width of the field',
    )
    TargetFieldVerticalAdjustment: Optional[float] = Field(
        None,
        description='Optional - vertical adjestment in relative height of the field',
    )
    TargetFieldWidth_Relative: Optional[float] = Field(
        None,
        description='Optional - scale factor for target field width - relative to width of field title; a value of 1.0 indicates the target value area has the same width as the field value as occurring in the image; a value of 2.0 would indicate that the target value area has 2 times the width of the field value as occurring in the image.',
    )
    TopAnchor: Optional[str] = Field(
        None, description='Optional - the top anchor of the field'
    )
    VerticalAlignmentType: Optional[str] = Field(
        None,
        description='Vertical alignment of target value area relative to the field anchor; Possible values are VCenter, Top, Bottom',
    )


class FormTableColumnDefinition(BaseModel):
    AllowNumericDigits: Optional[bool] = Field(
        None,
        description='Optional - set to false to block values that contain numeric digits, set to true to allow numeric digits',
    )
    AnchorMode: Optional[str] = Field(
        None,
        description='Optional - the matching mode for the anchor.  Possible values are Complete (requires the entire anchor to match) and Partial (allows only part of the anchor to match).  Default is Partial.',
    )
    ColumnID: Optional[str] = Field(
        None,
        description='The identifier of the field; use this to identify which field is being referenced',
    )
    DataType: Optional[str] = Field(
        None,
        description='The data type of the field; possible values are INTEGER (Integer value), STRING (Arbitrary string value, spaces are permitted), DATE (Date in a structured format), DECIMAL (Decimal number), ALPHANUMERIC (Continuous alphanumeric string with no spaces), STRINGNOWHITESPACE (A string that contains no whitespace characters), SERIALNUMBER (A serial-number style string that contains letters and numbers, and certain symbols; must contain at least one number), ALPHAONLY (Alphabet characters only, no numbers or symbols or whitespace)',
    )
    MinimumCharacterCount: Optional[int] = Field(
        None,
        description='Optional - the target number of digits in the field; useful for fixed-length fields',
    )
    TopAnchor: Optional[str] = Field(
        None, description='Optional - the top anchor of the column heading'
    )


class FormTableDefinition(BaseModel):
    ColumnDefinitions: Optional[List[FormTableColumnDefinition]] = Field(
        None, description='Definition of the columns in the table'
    )
    TableID: Optional[str] = Field(None, description='Optional; the ID of the table')
    TargetRowHeight_Relative: Optional[float] = Field(
        None,
        description='Optional - scale factor for target row height - relative to height of column header',
    )
    TargetTableHeight_Relative: Optional[float] = Field(
        None,
        description='Optional - scale factor for target table height - relative to maximum height of headers of columns',
    )


class GetPageAngleResult(BaseModel):
    Angle: Optional[float] = Field(
        None,
        description='Angle of the page in radians; 0 represents perfectly horizontal',
    )
    Successful: Optional[bool] = Field(
        None, description='True if the operation was successful, false otherwise'
    )


class ImageToTextResponse(BaseModel):
    MeanConfidenceLevel: Optional[float] = Field(
        None,
        description='Confidence level rating of the OCR operation; ratings above 80% are strong.',
    )
    TextResult: Optional[str] = Field(
        None, description='Converted text string from the image input.'
    )


class OcrPageResult(BaseModel):
    MeanConfidenceLevel: Optional[float] = Field(
        None,
        description='Confidence level rating of the OCR operation; ratings above 80% are strong.',
    )
    PageNumber: Optional[int] = Field(
        None,
        description='Page number of the page that was OCR-ed, starting with 1 for the first page in the PDF file',
    )
    TextResult: Optional[str] = Field(
        None, description='Converted text string from the image input.'
    )


class OcrWordElement(BaseModel):
    BlockNumber: Optional[int] = Field(
        None, description='Index of the containing block'
    )
    ConfidenceLevel: Optional[float] = Field(
        None,
        description='Confidence level of the machine learning result; possible values are 0.0 (lowest accuracy) - 1.0 (highest accuracy)',
    )
    Height: Optional[int] = Field(None, description='Height of the word in pixels')
    LineNumber: Optional[int] = Field(None, description='Line number of the word')
    PageNumber: Optional[int] = Field(None, description='Index of the containing page')
    ParagraphNumber: Optional[int] = Field(
        None, description='Index of the containing paragraph'
    )
    Width: Optional[int] = Field(None, description='Width of the word in pixels')
    WordNumber: Optional[int] = Field(None, description='Index of the word in the line')
    WordText: Optional[str] = Field(None, description='Text of the word')
    XLeft: Optional[int] = Field(
        None, description='X location of the left edge of the word in pixels'
    )
    YTop: Optional[int] = Field(
        None, description='Y location of the top edge of the word in pixels'
    )


class PdfToTextResponse(BaseModel):
    OcrPages: Optional[List[OcrPageResult]] = Field(
        None, description='Page OCR results'
    )
    Successful: Optional[bool] = Field(
        None, description='True if successful, false otherwise'
    )


class Point(BaseModel):
    X: Optional[int] = Field(
        None,
        description='X location in 2D in the image, where 0 represents the left edge of the image',
    )
    Y: Optional[int] = Field(
        None,
        description='Y location in 2D in the image, where 0 represents the top edge of the image',
    )


class ReceiptLineItem(BaseModel):
    ItemDescription: Optional[str] = Field(None, description='Description of the item')
    ItemPrice: Optional[float] = Field(
        None, description='Price of the item if available'
    )


class ReceiptRecognitionResult(BaseModel):
    AddressString: Optional[str] = Field(
        None,
        description='The address of the business printed on the receipt (if included on the receipt)',
    )
    BusinessName: Optional[str] = Field(
        None,
        description='The name of the business printed on the receipt (if included on the receipt)',
    )
    BusinessWebsite: Optional[str] = Field(
        None,
        description='The website URL of the business printed on the receipt (if included on the receipt)',
    )
    PhoneNumber: Optional[str] = Field(
        None,
        description='The phone number printed on the receipt (if included on the receipt)',
    )
    ReceiptItems: Optional[List[ReceiptLineItem]] = Field(
        None,
        description='The individual line items comprising the order; does not include total (see ReceiptTotal)',
    )
    ReceiptSubTotal: Optional[float] = Field(
        None,
        description='Optional; if available, the monetary value of the receipt subtotal - typically not including specialized line items such as Tax. If this value is not available, it will be 0.',
    )
    ReceiptTotal: Optional[float] = Field(
        None,
        description='The total monetary value of the receipt (if included on the receipt)',
    )
    Successful: Optional[bool] = Field(
        None, description='True if the operation was successful, false otherwise'
    )
    Timestamp: Optional[datetime] = Field(
        None,
        description='The date and time printed on the receipt (if included on the receipt)',
    )


class OcrImageToLinesWithLocationPostRequest(BaseModel):
    imageFile: bytes = Field(
        ...,
        description='Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported.',
    )


class OcrImageToWordsWithLocationPostRequest(BaseModel):
    imageFile: bytes = Field(
        ...,
        description='Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported.',
    )


class OcrImageToTextPostRequest(BaseModel):
    imageFile: bytes = Field(
        ...,
        description='Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported.',
    )


class OcrPdfToLinesWithLocationPostRequest(BaseModel):
    imageFile: bytes = Field(..., description='PDF file to perform OCR on.')


class OcrPdfToWordsWithLocationPostRequest(BaseModel):
    imageFile: bytes = Field(..., description='PDF file to perform OCR on.')


class OcrPdfToTextPostRequest(BaseModel):
    imageFile: bytes = Field(..., description='PDF file to perform OCR on.')


class OcrPhotoRecognizeBusinessCardPostRequest(BaseModel):
    imageFile: bytes = Field(
        ...,
        description='Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported.',
    )


class OcrPhotoRecognizeFormPostRequest(BaseModel):
    imageFile: bytes = Field(
        ...,
        description='Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported.',
    )


class OcrPhotoRecognizeFormAdvancedPostRequest(BaseModel):
    imageFile: bytes = Field(
        ...,
        description='Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported.',
    )


class OcrPhotoRecognizeReceiptPostRequest(BaseModel):
    imageFile: bytes = Field(
        ...,
        description='Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported.',
    )


class OcrPhotoToWordsWithLocationPostRequest(BaseModel):
    imageFile: bytes = Field(
        ...,
        description='Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported.',
    )


class OcrPhotoToTextPostRequest(BaseModel):
    imageFile: bytes = Field(
        ...,
        description='Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported.',
    )


class OcrPreprocessingImageBinarizePostRequest(BaseModel):
    imageFile: bytes = Field(
        ...,
        description='Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported.',
    )


class OcrPreprocessingImageBinarizeAdvancedPostRequest(BaseModel):
    imageFile: bytes = Field(
        ...,
        description='Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported.',
    )


class OcrPreprocessingImageGetPageAnglePostRequest(BaseModel):
    imageFile: bytes = Field(
        ...,
        description='Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported.',
    )


class OcrPreprocessingImageUnrotatePostRequest(BaseModel):
    imageFile: bytes = Field(
        ...,
        description='Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported.',
    )


class OcrPreprocessingImageUnrotateAdvancedPostRequest(BaseModel):
    imageFile: bytes = Field(
        ...,
        description='Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported.',
    )


class OcrPreprocessingImageUnskewPostRequest(BaseModel):
    imageFile: bytes = Field(
        ...,
        description='Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported.',
    )


class OcrReceiptsPhotoToCsvPostRequest(BaseModel):
    imageFile: bytes = Field(
        ...,
        description='Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported.',
    )


class OcrReceiptsPhotoToCsvPostResponse(BaseModel):
    pass


class FormDefinitionTemplate(BaseModel):
    FieldDefinitions: Optional[List[FormFieldDefinition]] = Field(
        None,
        description='Field definitions in the template; a field is comprised of a key/value pair',
    )
    TableDefinitions: Optional[List[FormTableDefinition]] = Field(
        None,
        description='Table definitions in the template; a table is comprised of columns and rows and exists in a 2-dimensional layout; a common example of a table would be an invoice',
    )


class ImageToWordsWithLocationResult(BaseModel):
    Successful: Optional[bool] = Field(
        None, description='True if successful, false otherwise'
    )
    Words: Optional[List[OcrWordElement]] = Field(
        None, description='Word elements in the image'
    )


class OcrLineElement(BaseModel):
    LineText: Optional[str] = Field(None, description='Text of the line')
    Words: Optional[List[OcrWordElement]] = Field(
        None, description='Word objects in the line'
    )


class OcrPageResultWithLinesWithLocation(BaseModel):
    Lines: Optional[List[OcrLineElement]] = Field(
        None, description='Word elements in the image'
    )
    PageNumber: Optional[int] = Field(
        None,
        description='Page number of the page that was OCR-ed, starting with 1 for the first page in the PDF file',
    )
    Successful: Optional[bool] = Field(
        None, description='True if successful, false otherwise'
    )


class OcrPageResultWithWordsWithLocation(BaseModel):
    PageNumber: Optional[int] = Field(
        None,
        description='Page number of the page that was OCR-ed, starting with 1 for the first page in the PDF file',
    )
    Successful: Optional[bool] = Field(
        None, description='True if successful, false otherwise'
    )
    Words: Optional[List[OcrWordElement]] = Field(
        None, description='Word elements in the image'
    )


class OcrPhotoTextElement(BaseModel):
    BoundingPoints: Optional[List[Point]] = Field(
        None, description='Points that form the bounding polygon around the text'
    )
    ConfidenceLevel: Optional[float] = Field(
        None,
        description='Confidence level of the machine learning result; possible values are 0.0 (lowest accuracy) - 1.0 (highest accuracy)',
    )
    Height: Optional[int] = Field(None, description='Height of the word in pixels')
    Text: Optional[str] = Field(None, description='Text of the word')
    Width: Optional[int] = Field(None, description='Width of the word in pixels')
    XLeft: Optional[int] = Field(
        None, description='X location of the left edge of the word in pixels'
    )
    YTop: Optional[int] = Field(
        None, description='Y location of the top edge of the word in pixels'
    )


class PdfToLinesWithLocationResult(BaseModel):
    OcrPages: Optional[List[OcrPageResultWithLinesWithLocation]] = Field(
        None, description='OCR results for each page'
    )
    Successful: Optional[bool] = Field(
        None, description='True if successful, false otherwise'
    )


class PdfToWordsWithLocationResult(BaseModel):
    OcrPages: Optional[List[OcrPageResultWithWordsWithLocation]] = Field(
        None, description='OCR page results'
    )
    Successful: Optional[bool] = Field(
        None, description='True if successful, false otherwise'
    )


class PhotoToWordsWithLocationResult(BaseModel):
    DiagnosticImage: Optional[str] = Field(
        None,
        description='Typically null.  To analyze OCR performance, enable diagnostic mode by adding the HTTP header "DiagnosticMode" with the value "true".  When this is true, a diagnostic image showing the details of the OCR result will be set in PNG format into DiagnosticImage.',
    )
    Successful: Optional[bool] = Field(
        None, description='True if successful, false otherwise'
    )
    TextElements: Optional[List[OcrPhotoTextElement]] = Field(
        None, description='Word elements in the image'
    )


class TableCellResult(BaseModel):
    CellValues: Optional[List[OcrPhotoTextElement]] = Field(
        None, description='Result cell value(s) extracted'
    )
    ColumnID: Optional[str] = Field(None, description='The ID of the column')


class TableRowResult(BaseModel):
    TableRowCellsResult: Optional[List[TableCellResult]] = Field(
        None, description='Table cells in this row result'
    )


class FieldResult(BaseModel):
    FieldValues: Optional[List[OcrPhotoTextElement]] = Field(
        None, description='Result field value(s) extracted'
    )
    TargetField: Optional[FormFieldDefinition] = None


class ImageToLinesWithLocationResult(BaseModel):
    Lines: Optional[List[OcrLineElement]] = Field(
        None, description='Words in the image'
    )
    Successful: Optional[bool] = Field(
        None, description='True if successful, false otherwise'
    )


class TableResult(BaseModel):
    TableDefinition: Optional[FormTableDefinition] = None
    TableRowsResult: Optional[List[TableRowResult]] = Field(
        None, description='Rows of data in the table'
    )


class FormRecognitionResult(BaseModel):
    BestMatchFormSettingName: Optional[str] = Field(
        None,
        description='Optional; populated when using photo/recognize/form/advanced with the Setting Name of the best-matching highest-relevance form',
    )
    Diagnostics: Optional[List[str]] = Field(
        None,
        description='Diagnostic images - default is null, enable diagnostics=true to populate this parameter with one image per field',
    )
    FieldValueExtractionResult: Optional[List[FieldResult]] = Field(
        None, description='Result of form field OCR data extraction'
    )
    Successful: Optional[bool] = Field(
        None, description='True if the operation was successful, false otherwise'
    )
    TableValueExtractionResults: Optional[List[TableResult]] = Field(
        None, description='Result of form table OCR data extraction'
    )
